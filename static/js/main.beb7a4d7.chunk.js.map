{"version":3,"sources":["logo.svg","App.js","reportWebVitals.js","index.js"],"names":["module","exports","App","audioFile","setAudioFile","useState","transcript","setTranscript","isLoading","setIsLoading","currentWordIndex","setCurrentWordIndex","useEffect","length","audio","document","querySelector","updateWordIndex","currentTime","index","findIndex","word","start","end","addEventListener","removeEventListener","React","createElement","style","textAlign","type","accept","onChange","event","URL","createObjectURL","target","files","onClick","async","text","controls","src","marginTop","map","key","color","marginRight","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","getElementById","render","StrictMode"],"mappings":"qJAAAA,EAAOC,QAAU,IAA0B,kC,4GCgF5BC,MA5Ef,WACE,MAAOC,EAAWC,GAAgBC,mBAAS,OACpCC,EAAYC,GAAiBF,mBAAS,KACtCG,EAAWC,GAAgBJ,oBAAS,IACpCK,EAAkBC,GAAuBN,mBAAS,GAwCzD,OApBAO,oBAAU,KACR,IAAKT,GAAmC,IAAtBG,EAAWO,OAAc,OAE3C,MAAMC,EAAQC,SAASC,cAAc,SAE/BC,EAAkBA,KACtB,MAAMC,EAAcJ,EAAMI,YACpBC,EAAQb,EAAWc,UACtBC,GAASH,GAAeG,EAAKC,OAASJ,GAAeG,EAAKE,KAE7DZ,GAA+B,IAAXQ,EAAeA,EAAQ,OAK7C,OAFAL,EAAMU,iBAAiB,aAAcP,GAE9B,KACLH,EAAMW,oBAAoB,aAAcR,KAEzC,CAACd,EAAWG,IAGboB,IAAAC,cAAA,OAAKC,MAAO,CAAEC,UAAW,WACvBH,IAAAC,cAAA,UAAI,yBACJD,IAAAC,cAAA,SAAOG,KAAK,OAAOC,OAAO,UAAUC,SAzCbC,IACzB7B,EAAa8B,IAAIC,gBAAgBF,EAAMG,OAAOC,MAAM,QAyClDX,IAAAC,cAAA,UAAQW,QAtCmBC,UAU7BhC,EAR0B,CACxB,CAAEiC,KAAM,QAASlB,MAAO,EAAGC,IAAK,GAChC,CAAEiB,KAAM,QAASlB,MAAO,EAAGC,IAAK,GAChC,CAAEiB,KAAM,OAAQlB,MAAO,EAAGC,IAAK,GAC/B,CAAEiB,KAAM,KAAMlB,MAAO,EAAGC,IAAK,GAC7B,CAAEiB,KAAM,IAAKlB,MAAO,EAAGC,IAAK,GAC5B,CAAEiB,KAAM,OAAQlB,MAAO,EAAGC,IAAK,OA8BU,2BAGxCpB,GACCuB,IAAAC,cAAA,WACED,IAAAC,cAAA,SAAOc,UAAQ,GACbf,IAAAC,cAAA,UAAQe,IAAKvC,EAAW2B,KAAK,eAE/BJ,IAAAC,cAAA,OAAKC,MAAO,CAAEe,UAAW,SACvBjB,IAAAC,cAAA,UAAI,mBACHrB,EAAWsC,IAAI,CAACvB,EAAMF,IACrBO,IAAAC,cAAA,QACEkB,IAAK1B,EACLS,MAAO,CACLkB,MAAO3B,IAAUT,EAAmB,MAAQ,QAC5CqC,YAAa,QAGd1B,EAAKmB,WC1DPQ,MAZSC,IAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,KAAKC,IAAkD,IAAjD,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,OAAEC,EAAM,QAAEC,GAASL,EACpEC,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAOP,GACPQ,EAAQR,MCDDS,IAASC,WAAW5C,SAAS6C,eAAe,SACpDC,OACHnC,IAAAC,cAACD,IAAMoC,WAAU,KACfpC,IAAAC,cAACzB,EAAG,QAOR8C,M","file":"static/js/main.beb7a4d7.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.06e73328.svg\";","import React, { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const [audioFile, setAudioFile] = useState(null);\n  const [transcript, setTranscript] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentWordIndex, setCurrentWordIndex] = useState(0);\n\n  const handleAudioUpload = (event) => {\n    setAudioFile(URL.createObjectURL(event.target.files[0]));\n  };\n\n  const handleTranscriptUpload = async () => {\n    // Example transcript with dummy data\n    const exampleTranscript = [\n      { text: \"Hello\", start: 0, end: 1 },\n      { text: \"world\", start: 1, end: 2 },\n      { text: \"this\", start: 2, end: 3 },\n      { text: \"is\", start: 3, end: 4 },\n      { text: \"a\", start: 4, end: 5 },\n      { text: \"test\", start: 5, end: 6 },\n    ];\n    setTranscript(exampleTranscript);\n  };\n\n  // Update current word based on audio playback time\n  useEffect(() => {\n    if (!audioFile || transcript.length === 0) return;\n\n    const audio = document.querySelector(\"audio\");\n\n    const updateWordIndex = () => {\n      const currentTime = audio.currentTime;\n      const index = transcript.findIndex(\n        (word) => currentTime >= word.start && currentTime <= word.end\n      );\n      setCurrentWordIndex(index !== -1 ? index : null);\n    };\n\n    audio.addEventListener(\"timeupdate\", updateWordIndex);\n\n    return () => {\n      audio.removeEventListener(\"timeupdate\", updateWordIndex);\n    };\n  }, [audioFile, transcript]);\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <h1>Audio-Transcript Sync</h1>\n      <input type=\"file\" accept=\"audio/*\" onChange={handleAudioUpload} />\n      <button onClick={handleTranscriptUpload}>\n        Load Example Transcript\n      </button>\n      {audioFile && (\n        <div>\n          <audio controls>\n            <source src={audioFile} type=\"audio/mp3\" />\n          </audio>\n          <div style={{ marginTop: \"20px\" }}>\n            <h2>Live Subtitles:</h2>\n            {transcript.map((word, index) => (\n              <span\n                key={index}\n                style={{\n                  color: index === currentWordIndex ? \"red\" : \"black\",\n                  marginRight: \"5px\",\n                }}\n              >\n                {word.text}\n              </span>\n            ))}\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}